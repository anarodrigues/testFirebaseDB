{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleChangeTitle","event","console","log","target","value","setState","userInput","title","author","state","handleChangeAuthor","handleClick","database","ref","push","removeBook","bookId","child","remove","books","on","response","newState","data","val","key","this","map","book","id","onClick","action","className","htmlFor","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAeAA,IAASC,cATM,CACdC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACZC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECkGeS,G,wDA9Gb,aAAe,IAAD,8BAEZ,gBA8BFC,kBAAoB,SAACC,GACnBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CACZC,UAAW,CACTC,MAAOP,EAAMG,OAAOC,MACpBI,OAAQ,EAAKC,MAAMH,UAAUE,UAIjCP,QAAQC,IAAI,yBAA0B,EAAKO,MAAMH,YAzCrC,EA4CdI,mBAAqB,SAACV,GACpBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CACZC,UAAW,CACTC,MAAO,EAAKE,MAAMH,UAAUC,MAC5BC,OAASR,EAAMG,OAAOC,SAI1BH,QAAQC,IAAI,mBAAoB,EAAKO,MAAMH,YArD/B,EAwDdK,YAAc,SAACX,GAEbC,QAAQC,IAAI,iCAAkC,EAAKO,MAAMH,WAC3CjB,EAASuB,WAAWC,IAAI,SAChCC,KAAK,EAAKL,MAAMH,WAGtB,EAAKD,SAAS,CACZC,UAAW,CACTC,MAAO,GACPC,OAAQ,OAlEA,EAwEdO,WAAa,SAACC,GAGE3B,EAASuB,WAAWC,IAAI,SAGhCI,MAAMD,GAAQE,UA3EpB,EAAKT,MAAQ,CACXU,MAAO,GACPb,UAAW,CACTC,MAAO,GACPC,OAAQ,KAPA,E,gEAcO,IAAD,OACJnB,EAASuB,WAAWC,IAAI,SAChCO,GAAG,SAAS,SAACC,GAEjB,IAAMC,EAAW,GACXC,EAAOF,EAASG,MACtB,IAAK,IAAIC,KAAOF,EAGdD,EAASR,KAAK,CAACW,IAAKA,EAAKlB,MAAOgB,EAAKE,GAAKlB,MAAOC,OAAQe,EAAKE,GAAKjB,SAGrE,EAAKH,SAAS,CACZc,MAAOG,S,+BAsDH,IAAD,OACP,OACE,6BACE,wCACA,4BACGI,KAAKjB,MAAMU,MAAMQ,KAAI,SAACC,GACrB,OACE,wBAAIH,IAAKG,EAAKC,IACZ,+BAAKD,EAAKrB,MAAV,QAAsBqB,EAAKpB,QAC3B,4BAAQsB,QAAS,kBAAM,EAAKf,WAAWa,EAAKH,OAA5C,eAMR,0BAAMM,OAAO,SAASC,UAAU,eAC9B,2BAAOC,QAAQ,gBAAf,gBACA,2BAAOC,KAAK,OAAOL,GAAG,eAAeM,SAAUT,KAAK3B,kBAAmBK,MAAOsB,KAAKjB,MAAMH,UAAUC,QAEnG,2BAAO0B,QAAQ,iBAAf,iBACA,2BAAOC,KAAK,OAAOL,GAAG,gBAAgBM,SAAUT,KAAKhB,mBAAoBN,MAAOsB,KAAKjB,MAAMH,UAAUE,SAErG,4BAAQsB,QAASJ,KAAKf,aAAtB,kB,GAzGQyB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.29695853.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\n// *** USE YOUR CONFIG OBJECT ***\nconst config = {\n\tapiKey: \"AIzaSyDYHBNR4fJZRhlNmMHqW3OOz1xgRWFQ9qU\",\n\tauthDomain: \"junoreactdbtest.firebaseapp.com\",\n\tdatabaseURL: \"https://junoreactdbtest.firebaseio.com\",\n\tprojectId: \"junoreactdbtest\",\n\tstorageBucket: \"junoreactdbtest.appspot.com\",\n    messagingSenderId: \"811657377476\",\n    appId: \"1:811657377476:web:bf15c55098d8c95fa47b91\"\n};\nfirebase.initializeApp(config);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n\n    super();\n    this.state = {\n      books: [],\n      userInput: {\n        title: '',\n        author: '',\n      }\n    }\n\n    //console.log(this.state.books);\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref('books');\n    dbRef.on('value', (response) => {\n      //console.log(response.val());\n      const newState = [];\n      const data = response.val();\n      for (let key in data) {\n        //console.log(\"Data: \", key, data[key]);\n        //console.log(\"Read: \", data[key].title, \" by \", data[key].author);\n        newState.push({key: key, title: data[key].title, author: data[key].author });\n        //console.log(\"newState: \", newState);\n      }\n      this.setState({\n        books: newState,\n      })\n    });\n  }\n\n  handleChangeTitle = (event) => {\n    console.log(event.target.value);\n    this.setState({\n      userInput :{\n        title: event.target.value,\n        author: this.state.userInput.author,\n      } \n    });\n\n    console.log(\"Change Title assync = \", this.state.userInput);\n  }\n\n  handleChangeAuthor = (event) => {\n    console.log(event.target.value);\n    this.setState({\n      userInput: {\n        title: this.state.userInput.title,\n        author : event.target.value,\n      }\n    });\n\n    console.log(\"Change Author = \", this.state.userInput);\n  }\n\n  handleClick = (event) => {\n\n    console.log(\"Click and current userInput = \", this.state.userInput);\n    const dbRef = firebase.database().ref('books');\n    dbRef.push(this.state.userInput);\n\n    //Clear the userInput\n    this.setState({\n      userInput: {\n        title: '',\n        author: '',\n      }\n    });\n    \n  }\n\n  removeBook = (bookId) => {\n\n    // here we create a reference to the database \n    const dbRef = firebase.database().ref('books');\n\n    // using the Firebase methods .child(). & remove(), we remove the node specific to the book ID\n    dbRef.child(bookId).remove();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>My books</h1>\n        <ul>\n          {this.state.books.map((book) => {\n            return (\n              <li key={book.id}>\n                <p>\"{book.title}\" by {book.author}</p>\n                <button onClick={() => this.removeBook(book.key)}>Remove</button>\n              </li>\n            )\n          })}\n        </ul>\n\n        <form action=\"submit\" className=\"addBookForm\">\n          <label htmlFor=\"newBookTitle\">Book Title: </label>\n          <input type=\"text\" id=\"newBookTitle\" onChange={this.handleChangeTitle} value={this.state.userInput.title} />\n\n          <label htmlFor=\"newBookAuthor\">Book Author: </label>\n          <input type=\"text\" id=\"newBookAuthor\" onChange={this.handleChangeAuthor} value={this.state.userInput.author} />\n\n          <button onClick={this.handleClick}>Add Book</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}